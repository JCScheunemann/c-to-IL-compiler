Resources
http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/
http://www.tutorialspoint.com/compiler_design/compiler_design_phases_of_compiler.htm
http://caml.inria.fr/pub/docs/oreilly-book/html/book-ora065.html
http://web.stanford.edu/class/cs143/
http://www.personal.kent.edu/~rmuhamma/Compilers/MyCompiler/phase.htm



TODO
C++ Boost
Do everything below ---------

Tools
Flex
Bison

Tokeniser
1. cin >> all the information in the .c file as a series of char / strings. Then match them with one of the token types and cout the answer.

List of token types

Good reference - http://www.codeproject.com/Articles/833206/Lexical-analyzer-an-example

Case insensitive
All English letters (upper and lower), digits, and extra characters as seen below, plus whitespace

Identifiers
begin with a letter, and continue with any number of letters
Keywords (reserved), include: start finish then if repeat var int float do read print void return dummy program
Relational operators, include: == < > =!= => =<
Other operators, include: = : + - * / %
Delimiters, include: . ( ) , { } ; [ ]
Numbers:
any sequence of decimal digits, no sign
assume no number is longer than 8 digits
Other assumption:
No whitespace needed to separate tokens except when this changes the tokens (as x y vs xy)
Comments start with // and end with new line

typedef enum{
	IDENTIFIER,
	KEYWORD,
	NUMBER,	// isnum()
	RELATION_OPERATOR,
	OPERATOR,
	DELIMITER,
	UNDEF,
	EOT
}TokenType;







Parser



Code Generation



Compiler




General References 

http://dragonbook.stanford.edu/
http://web.stanford.edu/class/cs143/


-------

http://dinosaur.compilertools.net/
https://www.reddit.com/r/programming/comments/92hqz/how_do_i_get_started_in_learning_about_compilers/
http://stackoverflow.com/questions/5456011/how-to-compile-lex-yacc-files-on-windows
http://www.regular-expressions.info/dot.html


Regex
http://regexone.com/








